mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
}
# Get the count of pages
mydata <- fromJSON(paste0(baseurl, 1), flatten=TRUE)
nbOfPages = mydata$pagination$totalPages
pages <- list()
for(i in 1:nbOfPages){
message("Retrieving page ", i, "/", nbOfPages, "\r", appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:\\[:space:]])\"([^:,])', '\\1\\2', pageData)
mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
}
pages <- list()
for(i in 1:nbOfPages){
message("Retrieving page ", i, "/", nbOfPages, "\r", appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:\\[:space:]])\"([^:,])', '\\1\\2', pageData)
mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
}
message("")
leaderboard <- rbind_pages(pages)
### Flatten the scores and append it (create new columns) to the dataframe
message("Flattening scores... ")
oldScores = leaderboard$scores
newScores <- data.frame()
# --- DEBUG
lNewScores <- list()
lengthOldScores = length(oldScores)
for(i in 1:lengthOldScores) {
message("Score: ", i, "/", lengthOldScores, "\r", appendLF = FALSE)
rOldScores <- oldScores[i]
lNewScores[[i]] <- as.data.frame(unlist(rOldScores, recursive = TRUE))
#rNewScores <- unlist(rOldScores, recursive = TRUE)
#names(rNewScores) <- gsub("(\\d)","\\.\\1",names(rNewScores))
#newScores <- rbind.fill(newScores, as.data.frame(t(rNewScores)))
}
message("")
dfNewScores <- rbind_pages(lNewScores)
View(lNewScores)
for(i in 1:lengthOldScores) {
message("Score: ", i, "/", lengthOldScores, "\r", appendLF = FALSE)
rOldScores <- oldScores[i]
lNewScores[[i]] <- as.data.frame(t(unlist(rOldScores), recursive = TRUE))
#rNewScores <- unlist(rOldScores, recursive = TRUE)
#names(rNewScores) <- gsub("(\\d)","\\.\\1",names(rNewScores))
#newScores <- rbind.fill(newScores, as.data.frame(t(rNewScores)))
}
lNewScores[[i]] <- as.data.frame(t(unlist(rOldScores), recursive = TRUE)))
# --- DEBUG
lNewScores <- list()
lengthOldScores = length(oldScores)
for(i in 1:lengthOldScores) {
message("Score: ", i, "/", lengthOldScores, "\r", appendLF = FALSE)
rOldScores <- oldScores[i]
lNewScores[[i]] <- as.data.frame(t(unlist(rOldScores, recursive = TRUE)))
#rNewScores <- unlist(rOldScores, recursive = TRUE)
#names(rNewScores) <- gsub("(\\d)","\\.\\1",names(rNewScores))
#newScores <- rbind.fill(newScores, as.data.frame(t(rNewScores)))
}
View(lNewScores)
for(i in 1:lengthOldScores) {
message("Score: ", i, "/", lengthOldScores, "\r", appendLF = FALSE)
rOldScores <- oldScores[i]
dfTmpNewScores <- as.data.frame(t(unlist(rOldScores, recursive = TRUE)))
colnames(dfTmpNewScores) <- gsub("(\\d)","\\.\\1",colnames(dfTmpNewScores))
lNewScores[[i]] <- dfTmpNewScores
#rNewScores <- unlist(rOldScores, recursive = TRUE)
#names(rNewScores) <- gsub("(\\d)","\\.\\1",names(rNewScores))
#newScores <- rbind.fill(newScores, as.data.frame(t(rNewScores)))
}
View(lNewScores)
dfNewScores <- rbind_pages(lNewScores)
newLeaderboard <- cbind(leaderboard, newScores)
newLeaderboard <- cbind(leaderboard, dfNewScores)
newLeaderboard$scores <- as.character(newLeaderboard$scores)
write.csv(newLeaderboard, file = outputFile)
i
i%%25
i%%24
i%%23
i%%22
i%%21
25%%22
25%%25
25%%26
25%%24
for(i in 1:lengthOldScores) {
message("Score: ", i, "/", lengthOldScores, "\r", appendLF = FALSE)
rOldScores <- oldScores[i]
dfTmpNewScores <- as.data.frame(t(unlist(rOldScores, recursive = TRUE)))
colnames(dfTmpNewScores) <- gsub("(\\d)","\\.\\1",colnames(dfTmpNewScores))
lNewScores[[i]] <- dfTmpNewScores
if(i%%50 == 0){
dfNewScores <- rbind.fill(dfNewScores, rbind_pages(lNewScores[i:(i-50)]))
}
#rNewScores <- unlist(rOldScores, recursive = TRUE)
#names(rNewScores) <- gsub("(\\d)","\\.\\1",names(rNewScores))
#newScores <- rbind.fill(newScores, as.data.frame(t(rNewScores)))
}
# --- DEBUG
lNewScores <- list()
dfNewScores <- data.frame()
lengthOldScores = length(oldScores)
for(i in 1:lengthOldScores) {
message("Score: ", i, "/", lengthOldScores, "\r", appendLF = FALSE)
rOldScores <- oldScores[i]
dfTmpNewScores <- as.data.frame(t(unlist(rOldScores, recursive = TRUE)))
colnames(dfTmpNewScores) <- gsub("(\\d)","\\.\\1",colnames(dfTmpNewScores))
lNewScores[[i]] <- dfTmpNewScores
if(i%%50 == 0){
dfNewScores <- rbind.fill(dfNewScores, rbind_pages(lNewScores[(i-50+1):i]))
}
#rNewScores <- unlist(rOldScores, recursive = TRUE)
#names(rNewScores) <- gsub("(\\d)","\\.\\1",names(rNewScores))
#newScores <- rbind.fill(newScores, as.data.frame(t(rNewScores)))
}
View(dfNewScores)
# --- DEBUG
lNewScores <- list()
dfNewScores <- data.frame()
lengthOldScores = length(oldScores)
lChuncks = 100
View(pages)
# --- DEBUG
lNewScores <- list()
dfNewScores <- data.frame()
lengthOldScores = length(oldScores)
lChuncks = 100
for(i in 1:lengthOldScores) {
message("Score: ", i, "/", lengthOldScores, "\r", appendLF = FALSE)
rOldScores <- oldScores[i]
dfTmpNewScores <- as.data.frame(t(unlist(rOldScores, recursive = TRUE)))
colnames(dfTmpNewScores) <- gsub("(\\d)","\\.\\1",colnames(dfTmpNewScores))
j = (i-1)%%lChuncks + 1
lNewScores[[j]] <- dfTmpNewScores
if(j == lChuncks){
dfNewScores <- rbind.fill(dfNewScores, rbind_pages(lNewScores))
lNewScores <- list()
}
#rNewScores <- unlist(rOldScores, recursive = TRUE)
#names(rNewScores) <- gsub("(\\d)","\\.\\1",names(rNewScores))
#newScores <- rbind.fill(newScores, as.data.frame(t(rNewScores)))
}
View(lNewScores)
# --- DEBUG
lNewScores <- list()
dfNewScores <- data.frame()
lengthOldScores = length(oldScores)
lChuncks = 100
for(i in 1:lengthOldScores) {
message("Score: ", i, "/", lengthOldScores, "\r", appendLF = FALSE)
rOldScores <- oldScores[i]
dfTmpNewScores <- as.data.frame(t(unlist(rOldScores, recursive = TRUE)))
colnames(dfTmpNewScores) <- gsub("(\\d)","\\.\\1",colnames(dfTmpNewScores))
j = (i-1)%%lChuncks + 1
lNewScores[[j]] <- dfTmpNewScores
if(j == lChuncks){
dfNewScores <- rbind.fill(dfNewScores, rbind_pages(lNewScores))
lNewScores <- list()
}
#rNewScores <- unlist(rOldScores, recursive = TRUE)
#names(rNewScores) <- gsub("(\\d)","\\.\\1",names(rNewScores))
#newScores <- rbind.fill(newScores, as.data.frame(t(rNewScores)))
}
message("Score: ", i, "/", lengthOldScores, "\r", appendLF = FALSE)
rOldScores <- oldScores[i]
dfTmpNewScores <- as.data.frame(t(unlist(rOldScores, recursive = TRUE)))
colnames(dfTmpNewScores) <- gsub("(\\d)","\\.\\1",colnames(dfTmpNewScores))
j = (i-1)%%lChuncks + 1
lNewScores[[j]] <- dfTmpNewScores
if(j == lChuncks){
dfNewScores <- rbind.fill(dfNewScores, rbind_pages(lNewScores))
lNewScores <- list()
}
# --- DEBUG
lNewScores <- list()
dfNewScores <- data.frame()
lengthOldScores = length(oldScores)
lChuncks = 100
for(i in 1:lengthOldScores) {
message("Score: ", i, "/", lengthOldScores, "\r", appendLF = FALSE)
rOldScores <- oldScores[i]
dfTmpNewScores <- as.data.frame(t(unlist(rOldScores, recursive = TRUE)))
colnames(dfTmpNewScores) <- gsub("(\\d)","\\.\\1",colnames(dfTmpNewScores))
j = (i-1)%%lChuncks + 1
lNewScores[[j]] <- dfTmpNewScores
if(j == lChuncks){
dfNewScores <- rbind.fill(dfNewScores, rbind_pages(lNewScores))
lNewScores <- list()
}
#rNewScores <- unlist(rOldScores, recursive = TRUE)
#names(rNewScores) <- gsub("(\\d)","\\.\\1",names(rNewScores))
#newScores <- rbind.fill(newScores, as.data.frame(t(rNewScores)))
}
leaderboard3 <- read.csv(file = "CF-rawdata-temp.csv")
counts <- sort(table(leaderboard3$entrant.regionName))
par(las = 1, mar = c(3, 8, 3, 3))
bp <- barplot(counts, horiz=TRUE)
text(x = counts, y = bp, label = counts, pos = 2, cex = 0)
bp <- barplot(counts, horiz=TRUE)
text(x = counts, y = bp, label = counts, pos = 2, cex = 0.8)
bp <- barplot(counts, main="Nb of athletes per region", horiz=TRUE)
text(x = counts, y = bp, label = counts, pos = 2, cex = 0.8)
bp <- barplot(counts, main=paste0("Nb of athletes per region (total=", nbTotalAthletes, ")"), horiz=TRUE)
nbTotalAthletes = length(leaderboard3$entrant.regionName)
bp <- barplot(counts, main=paste0("Nb of athletes per region (total=", nbTotalAthletes, ")"), horiz=TRUE)
bp <- barplot(counts, main=paste0("Number of athletes per region (total=", nbTotalAthletes, ")"), horiz=TRUE)
text(x = counts, y = bp, label = counts, pos = 2, cex = 0.8)
count
counts
# TODO: Pie Chart
pie(counts)
bp <- barplot(counts, main=paste0("Number of men athletes per region (total=", nbTotalAthletes, ")"), horiz=TRUE)
View(leaderboard3)
# --- Ranking vs Age
plot(leaderboard3$entrant.age, leaderboard3$overallRank)
# --- Top ranking per region
cor(leaderboard3[,c('entrant.age', 'overallRank')])
# --- Top ranking per region
cor(leaderboard3[,c('entrant.age', 'overallRank', 'entrant.height')])
as.factor(leaderboard3$entrant.height)
as.numeric(leaderboard3$entrant.height)
cm(1)
# --- Median ranking per region
convertHeight <- function(x) {
if(str_detect(x, " in")) {
x2 = gsub(" in", "", x)
y = cm(x2)
} else if (str_detect(x, " cm")) {
y = gsub(" cm", "", x)
}
y
}
apply(leaderboard3$entrant.height, 2, convertHeight)
apply(leaderboard3$entrant.height, 1, convertHeight)
leaderboard3$entrant.height
apply(leaderboard3$entrant.height, 1, convertHeight)
# --- Median ranking per region
convertHeight <- function(x) {
Message("toto")
if(str_detect(x, " in")) {
x2 = gsub(" in", "", x)
y = cm(x2)
} else if (str_detect(x, " cm")) {
y = gsub(" cm", "", x)
}
y
}
apply(leaderboard3$entrant.height, 1, convertHeight)
apply(leaderboard3$entrant.height, 1, function(x) x)
lapply(leaderboard3$entrant.height, function(x) x)
tmp <- lapply(leaderboard3$entrant.height, function(x) x)
# --- Convert height to cm
convertHeight <- function(x) {
if(str_detect(x, " in")) {
x2 = gsub(" in", "", x)
y = cm(x2)
} else if (str_detect(x, " cm")) {
y = gsub(" cm", "", x)
}
y
}
leaderboard3$entrant.height
tmp <- lapply(leaderboard3$entrant.height, convertHeight)
# --- Convert height to cm
convertHeight <- function(x) {
if(grepl(x, " in")) {
x2 = gsub(" in", "", x)
y = cm(x2)
} else if (grepl(x, " cm")) {
y = gsub(" cm", "", x)
}
y
}
leaderboard3$entrant.height
tmp <- lapply(leaderboard3$entrant.height, convertHeight)
# --- Convert height to cm
convertHeight <- function(x) {
y = 0
if(grepl(x, " in")) {
x2 = gsub(" in", "", x)
y = cm(x2)
} else if (grepl(x, " cm")) {
y = gsub(" cm", "", x)
}
y
}
tmp <- lapply(leaderboard3$entrant.height, convertHeight)
gsub("[^[:num:]]", ""," 11 cm")
gsub("[^[:digit:]]", ""," 11 cm")
asnumeric(gsub("[^[:digit:]]", ""," 11 cm"))
as.numeric(gsub("[^[:digit:]]", ""," 11 cm"))
# --- Convert height to cm
convertHeight <- function(x) {
y = 0
if(grepl(x, " in")) {
x2 = gsub("[^[:digit:]]", "",x)
y = cm(as.numeric(x2))
} else if (grepl(x, " cm")) {
y = as.numeric(gsub("[^[:digit:]]", "",x))
}
y
}
tmp <- lapply(leaderboard3$entrant.height, convertHeight)
View(tmp)
grepl("x in", " in")
grepl("x n", " in")
grepl("x inn", " in")
grepl("x in", " in")
grepl(" in", "x in")
# --- Convert height to cm
convertHeight <- function(x) {
y = 0
if(grepl(" in", x)) {
x2 = gsub("[^[:digit:]]", "",x)
y = cm(as.numeric(x2))
} else if (grepl(" cm", x)) {
y = as.numeric(gsub("[^[:digit:]]", "",x))
}
y
}
tmp <- lapply(leaderboard3$entrant.height, convertHeight)
View(tmp)
# --- Convert height to cm
convertHeight <- function(x) {
y = x
if(grepl(" in", x)) {
x2 = gsub("[^[:digit:]]", "",x)
y = cm(as.numeric(x2))
} else if (grepl(" cm", x)) {
y = as.numeric(gsub("[^[:digit:]]", "",x))
}
y
}
tmp <- lapply(leaderboard3$entrant.height, convertHeight)
View(tmp)
# --- Convert height to cm
convertHeight <- function(x) {
y = x
if(grepl(" in", x)) {
x2 = gsub("[^[:digit:]]", "",x)
y = cm(as.numeric(x2))
} else if (grepl(" cm", x)) {
y = as.numeric(gsub("[^[:digit:]]", "",x))
} else if( x == "") {
y = 0
}
y
}
tmp <- lapply(leaderboard3$entrant.height, convertHeight)
View(tmp)
which(is.na(as.numeric(as.character(tmp))))
leaderboard3$entrant.height <- lapply(leaderboard3$entrant.height, convertHeight)
View(leaderboard3)
# --- Convert Lb to Kg
convertWeight <- function(x) {
y = x
if(grepl(" lb", x)) {
x2 = gsub("[^[:digit:]]", "",x)
y = as.numeric(x2) * 0.45359237
} else if (grepl(" kg", x)) {
y = as.numeric(gsub("[^[:digit:]]", "",x))
} else if( x == "") {
y = 0
}
y
}
tmp <- lapply(leaderboard3$entrant.weight, convertWeight)
View(tmp)
which(is.na(as.numeric(as.character(tmp))))
leaderboard3$entrant.weight <- lapply(leaderboard3$entrant.weight, convertWeight)
View(leaderboard3)
library(jsonlite)
library(plyr)
# Variables
outputFile = "CF-rawdata.csv"
baseurl <- "https://games.crossfit.com/competitions/api/v1/competitions/open/2018/leaderboards?division=1&region=0&scaled=0&sort=0&occupation=0&page="
# Get the count of pages
mydata <- fromJSON(paste0(baseurl, 1), flatten=TRUE)
nbOfPages = mydata$pagination$totalPages
pages <- list()
library(jsonlite)
library(plyr)
# Variables
outputFile = "CF-rawdata.csv"
baseurl <- "https://games.crossfit.com/competitions/api/v1/competitions/open/2018/leaderboards?division=1&region=0&scaled=0&sort=0&occupation=0&page="
# Get the count of pages
mydata <- fromJSON(paste0(baseurl, 1), flatten=TRUE)
nbOfPages = mydata$pagination$totalPages
pages <- list()
for(i in 1:nbOfPages){
message("Retrieving page ", i, "/", nbOfPages, "\r", appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:\\[:space:]])\"([^:,])', '\\1\\2', pageData)
mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
}
message("")
leaderboard <- rbind_pages(pages)
### Flatten the scores and append it (create new columns) to the dataframe
message("Flattening scores... ")
oldScores = leaderboard$scores
newScores <- data.frame()
lNewScores <- list()
dfNewScores <- data.frame()
lengthOldScores = length(oldScores)
lChuncks = 100
for(i in 1:lengthOldScores) {
message("Score: ", i, "/", lengthOldScores, "\r", appendLF = FALSE)
rOldScores <- oldScores[i]
dfTmpNewScores <- as.data.frame(t(unlist(rOldScores, recursive = TRUE)))
colnames(dfTmpNewScores) <- gsub("(\\d)","\\.\\1",colnames(dfTmpNewScores))
j = (i-1)%%lChuncks + 1
lNewScores[[j]] <- dfTmpNewScores
if(j == lChuncks){
dfNewScores <- rbind.fill(dfNewScores, rbind_pages(lNewScores))
lNewScores <- list()
}
#rNewScores <- unlist(rOldScores, recursive = TRUE)
#names(rNewScores) <- gsub("(\\d)","\\.\\1",names(rNewScores))
#newScores <- rbind.fill(newScores, as.data.frame(t(rNewScores)))
}
message("")
newLeaderboard <- cbind(leaderboard, dfNewScores)
dfNewScores <- rbind.fill(dfNewScores, rbind_pages(lNewScores))
newLeaderboard <- cbind(leaderboard, dfNewScores)
### Convert scores to strings
message("Convert scores to strings...")
newLeaderboard$scores <- as.character(newLeaderboard$scores)
### Convert all weights in kg
message("Convert weights in kg...")
convertWeight <- function(x) {
y = x
if(grepl(" lb", x)) {
x2 = gsub("[^[:digit:]]", "",x)
y = as.numeric(x2) * 0.45359237
} else if (grepl(" kg", x)) {
y = as.numeric(gsub("[^[:digit:]]", "",x))
} else if( x == "") {
y = 0
}
y
}
newLeaderboard$entrant.weight <- lapply(newLeaderboard$entrant.weight, convertWeight)
### Convert all heights in cm
message("Convert heights in cm...")
convertHeight <- function(x) {
y = x
if(grepl(" in", x)) {
x2 = gsub("[^[:digit:]]", "",x)
y = cm(as.numeric(x2))
} else if (grepl(" cm", x)) {
y = as.numeric(gsub("[^[:digit:]]", "",x))
} else if( x == "") {
y = 0
}
y
}
newLeaderboard$entrant.height <- lapply(newLeaderboard$entrant.height, convertHeight)
### store it
message("Store the data in ", outputFile, " ...")
write.csv(newLeaderboard, file = outputFile)
View(newLeaderboard)
# --- DEBUG
colnames(newLeaderboard)
write.csv(newLeaderboard$scores, file = "tmp.csv")
for(i in 1:length(colnames(newLeaderboard))) {
message("Print ", i)
write.csv(newLeaderboard[,i], file = "tmp.csv")
}
for(i in 1:length(colnames(newLeaderboard))) {
message("Print ", i, " / ", colnames(newLeaderboard)[i])
write.csv(newLeaderboard[,i], file = "tmp.csv")
}
# --- DEBUG
round(newLeaderboard$entrant.height, digits = 0)
typeof(newLeaderboard$entrant.height)
typeof(newLeaderboard$entrant.height[1])
typeof(newLeaderboard$entrant.height[[1]])
typeof(newLeaderboard$scores)
typeof(newLeaderboard)
typeof(newLeaderboard$entrant.age)
# --- DEBUG
as.numeric(newLeaderboard$entrant.height)
newLeaderboard$entrant.height <- as.numeric(newLeaderboard$entrant.height)
newLeaderboard$entrant.weight <- as.numeric(newLeaderboard$entrant.weight)
for(i in 22:length(colnames(newLeaderboard))) {
message("Print ", i, " / ", colnames(newLeaderboard)[i])
write.csv(newLeaderboard[,i], file = "tmp.csv")
}
write.csv(newLeaderboard, file = outputFile)
count(newLeaderboard$entrant.gender)
count(newLeaderboard$entrant.regionName)
sort(count(newLeaderboard$entrant.regionName))
count(newLeaderboard$entrant.affiliateName)
newLeaderboard[entrant.affiliateName == "AFC CrossFit"]
newLeaderboard[newLeaderboard$entrant.affiliateName == "AFC CrossFit"]
subset(newLeaderboard, entrant.affiliateName == "AFC CrossFit")
subset(newLeaderboard, entrant.affiliateName == "AFC CrossFit", select=c(entrant.competitorName))
subset(newLeaderboard, entrant.affiliateName == "AFC CrossFit", select=c(entrant.competitorName, overallRank))
subset(newLeaderboard, entrant.affiliateName == "* CrossFit", select=c(entrant.competitorName, overallRank))
subset(newLeaderboard, grepl("Arche", entrant.affiliateName), select=c(entrant.competitorName, overallRank))
subset(newLeaderboard, grepl("Arche", entrant.affiliateName), select=c(entrant.affiliateName, entrant.competitorName, overallRank))
subset(newLeaderboard, grepl("Arche", entrant.affiliateName), select=c(entrant.affiliateName, entrant.competitorName, overallRank))
subset(newLeaderboard, entrant.competitorId == 1309535)
k=0
