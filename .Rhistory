if(grepl(" lb", x)) {
x2 = gsub("[^[:digit:]]", "",x)
y = as.numeric(x2) * 0.45359237
} else if (grepl(" kg", x)) {
y = as.numeric(gsub("[^[:digit:]]", "",x))
} else if( x == "") {
y = 0
}
y
}
newLeaderboard$entrant.weight <- lapply(newLeaderboard$entrant.weight, convertWeight)
newLeaderboard$entrant.weight <- as.numeric(newLeaderboard$entrant.weight)
### store it in Rda format
message("Store the data in ", outputFile, ".Rda ...")
save(newLeaderboard, file = paste0(outputFile, ".Rda"))
### Convert scores to strings
message("Convert scores to strings...")
newLeaderboard$scores <- as.character(newLeaderboard$scores)
### store it in CSV format
message("Store the data in ", outputFile, ".csv ...")
write.csv(newLeaderboard, file = paste0(outputFile, ".csv"))
# leaderboard3 <- read.csv(file = outputFile)
}
cfDownloadLeaderboard(year = "2017")
library(jsonlite)
library(plyr)
cfDownloadLeaderboard(year = "2017")
cfDownloadLeaderboard(year = "2017")
debugSource('D:/WS-Code/CFR/CFDownloadLeaderboard.R')
View(mydata)
debugSource('D:/WS-Code/CFR/CFDownloadLeaderboard.R')
debugSource('D:/WS-Code/CFR/CFDownloadLeaderboard.R')
debugSource('D:/WS-Code/CFR/CFDownloadLeaderboard.R')
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:\\[:space:]])\"([^:,])', '\\1\\2', pageData)
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:\\[:space:]])\"([^:,])', '\\1\\2', pageData)
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,])', '\\1\\2', pageData)
mydata <- fromJSON(pageData2, flatten=TRUE)
# Handle issues with unescaped backslashes
# pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,])', '\\1\\2', pageData)
pageData2 <- pageData
mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
debugSource('D:/WS-Code/CFR/CFDownloadLeaderboard.R')
source('D:/WS-Code/CFR/CFDownloadLeaderboard.R')
View(cfDownloadLeaderboard)
View(cfDownloadLeaderboard)
source('D:/WS-Code/CFR/CFDownloadLeaderboard.R')
source('D:/WS-Code/CFR/CFDownloadLeaderboard.R')
pageData
pageData[1]
pageData[100]
grep("ROACH", pageData)
pageData[4331]
pageData[4332]
gsub('', '',pageData[4331])
gsub('"', '',pageData[4331])
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,])', '\\1\\2', pageData)
mydata <- fromJSON(pageData2, flatten=TRUE)
library(jsonlite)
library(plyr)
### Variables
outputFile = "CFrawdata.SCT"
competition = "open"
year = "2018"
outputFile = paste0(outputFile, ".", competition, ".", year)
baseurl <- paste0("https://games.crossfit.com/competitions/api/v1/competitions/",
competition, "/",
year, "/",
"leaderboards?",
"division=","1",
"&region=","0",
"&scaled=","0",
"&sort=","0",
"&occupation=","0",
"&page=")
# Get the count of pages
mydata <- fromJSON(paste0(baseurl, 1), flatten=TRUE)
nbOfPages = max(mydata$pagination$totalPages, mydata$totalpages)
pages <- list()
for(i in 1:nbOfPages){
message("\rRetrieving page ", i, "/", nbOfPages, appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,])', '\\1\\2', pageData)
mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
}
year = "2017"
outputFile = paste0(outputFile, ".", competition, ".", year)
baseurl <- paste0("https://games.crossfit.com/competitions/api/v1/competitions/",
competition, "/",
year, "/",
"leaderboards?",
"division=","1",
"&region=","0",
"&scaled=","0",
"&sort=","0",
"&occupation=","0",
"&page=")
# Get the count of pages
mydata <- fromJSON(paste0(baseurl, 1), flatten=TRUE)
nbOfPages = max(mydata$pagination$totalPages, mydata$totalpages)
pages <- list()
for(i in 1:nbOfPages){
message("\rRetrieving page ", i, "/", nbOfPages, appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,])', '\\1\\2', pageData)
mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
}
pageData2
save(pageData2, 'dump.tmp')
save(pageData2, './dump.tmp')
save('./dump.tmp', pageData2)
save(file = './dump.tmp', pageData2)
mydata <- fromJSON(pageData2, flatten=TRUE)
grep("Champlain", pageData2)
grepl("Champlain", pageData2)
grep("Champlain", pageData2)
pageData2[1]
mydata <- fromJSON(pageData2, flatten=TRUE)
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,}])', '\\1\\2', pageData)
mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
outputFile = "CFrawdata.SCT"
competition = "open"
year = "2017"
outputFile = paste0(outputFile, ".", competition, ".", year)
# Notes:
#   Division:
# l <- c("yip" = 1, "yop" = 2)
# a = names(which(l == 1))
# b = unname(l["yop"])
divisions = c(
"Men" = 1,
"Women" = 2,
"Men_45-49" = 3,
"Women_45-49" = 4,
"Men_50-54" = 5,
"Women_50-54" = 6,
"Men_55-59" = 7,
"Women_55-59" = 8,
"Men_60+" = 9,
"Women_60+" = 10,
"Team" = 11,
"Men_40-44" = 12,
"Women_40-44" = 13,
"Boys_14-15" = 14,
"Girls_14-15" = 15,
"Boys_16-17" = 16,
"Girls_16-17" = 17,
"Men_35-39" = 18,
"Women_35-39" = 19
)
#   Region:
regions = c(
"Worldwide" = 0,
"Africa Middle East" = 25,
"Asia" = 20,
"Australasia" = 21,
"Canada East" = 18,
"Canada West" = 5,
"Central America" = 26,
"Central East" = 6,
"Europe Central" = 23,
"Europe North" = 22,
"Europe South" = 24,
"Mid Atlantic" = 9,
"North Central" = 10,
"North East" = 11,
"South America" = 27,
"South Central" = 14,
"South East" = 15,
"South West" = 17,
" West Coast" = 19
)
#   Scaled:
#       0 = Rx'd
#       1 = Scaled
baseurl <- paste0("https://games.crossfit.com/competitions/api/v1/competitions/",
competition, "/",
year, "/",
"leaderboards?",
"division=","1",
"&region=","0",
"&scaled=","0",
"&sort=","0",
"&occupation=","0",
"&page=")
### Download the leaderboard
# Get the count of pages
mydata <- fromJSON(paste0(baseurl, 1), flatten=TRUE)
nbOfPages = max(mydata$pagination$totalPages, mydata$totalpages)
pages <- list()
for(i in 1:nbOfPages){
message("\rRetrieving page ", i, "/", nbOfPages, appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,}])', '\\1\\2', pageData)
#save(file = './dump.tmp', pageData2)
mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
}
for(i in 1:nbOfPages){
message("\rRetrieving page ", i, "/", nbOfPages, appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,}])', '\\1\\2', pageData)
#save(file = './dump.tmp', pageData2)
mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
}
warnings()
message("")
leaderboard <- rbind_pages(pages)
pages <- list()
for(i in 1:nbOfPages){
message("\rRetrieving page ", i, "/", nbOfPages, appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,}])', '\\1\\2', pageData)
#save(file = './dump.tmp', pageData2)
mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
}
pages <- list()
for(i in 1:nbOfPages){
message("\rRetrieving page ", i, "/", nbOfPages, appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,}])', '\\1\\2', pageData)
#save(file = './dump.tmp', pageData2)
mydata <- fromJSON(pageData2, flatten=TRUE)
pages[[i+1]] <- mydata$leaderboardRows
}
View(mydata)
# Get the count of pages
mydata <- fromJSON(paste0(baseurl, 1), flatten=TRUE)
if(year == '2018') {
nbOfPages = mydata$pagination$totalPages
} else if (year == '2017') {
nbOfPages = mydata$totalpages
}
pages <- list()
for(i in 1:nbOfPages){
message("\rRetrieving page ", i, "/", nbOfPages, appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,}])', '\\1\\2', pageData)
#save(file = './dump.tmp', pageData2)
mydata <- fromJSON(pageData2, flatten=TRUE)
if(year == '2018') {
pages[[i+1]] <- mydata$leaderboardRows
} else if (year == '2017') {
pages[[i+1]] <- mydata$athletes
}
}
message("")
leaderboard <- rbind_pages(pages)
View(leaderboard)
for(i in 1:nbOfPages){
message("\rRetrieving page ", i, "/", nbOfPages, appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,}])', '\\1\\2', pageData)
#save(file = './dump.tmp', pageData2)
mydata <- fromJSON(pageData2, flatten=TRUE)
if(year == '2018') {
pages[[i+1]] <- mydata$leaderboardRows
} else if (year == '2017') {
pages[[i+1]] <- mydata$athletes
}
}
pages <- list()
for(i in 1:nbOfPages){
message("\rRetrieving page ", i, "/", nbOfPages, appendLF = FALSE)
pageData <- readLines(paste0(baseurl, i))
# Handle issues with unescaped backslashes
pageData2 <- gsub('([^,:{\\[:space:]])\"([^:,}])', '\\1\\2', pageData)
#save(file = './dump.tmp', pageData2)
mydata <- fromJSON(pageData2, flatten=TRUE)
if(year == '2018') {
pages[[i+1]] <- mydata$leaderboardRows
} else if (year == '2017') {
pages[[i+1]] <- mydata$athletes
}
}
message("")
leaderboard <- rbind_pages(pages)
View(pages)
all(vapply(pages, is.data.frame, logical(1)))
pages[sapply(pages, length)>0]
pages[sapply(pages, length)=0]
pages[sapply(pages, length)=0]
pages[sapply(pages, length)==0]
View(pages)
pages[[2:]]
leaderboard <- rbind_pages(pages[[2:4292]])
leaderboard <- rbind_pages(pages)
all(vapply(pages[[2:4]], is.data.frame, logical(1))) is not TRUE
all(vapply(pages[2:4], is.data.frame, logical(1))) is not TRUE
pages == NULL
pages[[1]] <- NULL
View(pages)
leaderboard <- rbind_pages(pages)
all(vapply(pages, is.data.frame, logical(1)))
vapply(pages, is.data.frame, logical(1))
which(vapply(pages, is.data.frame, logical(1)))
which(vapply(pages, is.data.frame, logical(1)), arr.ind = TRUE, useNames = TRUE))
which(vapply(pages, is.data.frame, logical(1)), arr.ind = TRUE, useNames = TRUE))
which(vapply(pages, is.data.frame, logical(1))), arr.ind = TRUE, useNames = TRUE)
which(vapply(pages, is.data.frame, logical(1)), arr.ind = TRUE, useNames = TRUE)
which(vapply(pages, is.data.frame, logical(1)), arr.ind = TRUE, useNames = FALSE)
which(vapply(pages, is.data.frame, logical(1)) == FALSE)
nullPages <- which(vapply(pages, is.data.frame, logical(1)) == FALSE)
pages[[nulmPages]] <- NULL
pages[[nullPages]] <- NULL
which(vapply(pages, is.data.frame, logical(1)) == FALSE)
pages[[nullPages]] <- NULL
which(vapply(pages, is.data.frame, logical(1)) == FALSE)
for(i in nullPages){
i
}
for(i in nullPages){
messages(i)
}
for(i in nullPages){
message(i)
}
for(i in nullPages){
pages[[i]] <- NULL
}
which(vapply(pages, is.data.frame, logical(1)) == FALSE)
for(i in nullPages){
pages[[i]] <- NULL
}
for(i in nullPages){
message("Remove null page ", i)
pages[[i]] <- NULL
}
which(vapply(pages, is.data.frame, logical(1)) == FALSE)
nullPages
order(nullPages)
sort(nullPages)
sort(nullPages, decreasing = TRUE)
nullPages <- which(vapply(pages, is.data.frame, logical(1)) == FALSE)
for(i in sort(nullPages, decreasing = TRUE)){
message("Remove null page ", i)
pages[[i]] <- NULL
}
which(vapply(pages, is.data.frame, logical(1)) == FALSE)
leaderboard <- rbind_pages(pages)
### Flatten the scores and append it (create new columns) to the dataframe
message("Flattening scores... ")
oldScores = leaderboard$scores
newScores <- data.frame()
lNewScores <- list()
dfNewScores <- data.frame()
lengthOldScores = length(oldScores)
lChuncks = 1000
for(i in 1:lengthOldScores) {
message("\rScore: ", i, "/", lengthOldScores, appendLF = FALSE)
rOldScores <- oldScores[i]
dfTmpNewScores <- as.data.frame(t(unlist(rOldScores, recursive = TRUE)))
colnames(dfTmpNewScores) <- gsub("(\\d)","\\.\\1",colnames(dfTmpNewScores))
j = (i-1)%%lChuncks + 1
lNewScores[[j]] <- dfTmpNewScores
if(j == lChuncks || i == lengthOldScores){
dfNewScores <- rbind.fill(dfNewScores, rbind_pages(lNewScores))
lNewScores <- list()
}
}
message("")
newLeaderboard <- cbind(leaderboard, dfNewScores)
View(newLeaderboard)
View(newLeaderboard)
cm("6'2\"")
gsub("^.*([:digit:]*)'.*$", "\\1", "6'2\"")
gsub("^.*([:digit:]*)\'.*$", "\\1", "6'2\"")
gsub("^([:digit:]*)\'.*$", "\\1", "6'2\"")
gsub("^([:digit:]*)'.*$", "\\1", "6'2\"")
gsub("^([:digit:]*)'.*$", "", "6'2\"")
gsub("^([:digit:]*)'.*$", "\\2", "6'2\"")
gsub("^([:digit:]*)'.*$", "\\0", "6'2\"")
gsub("^([:digit:]*)'.*$", "\\1", "6'2\"")
gsub("^([:digit:]*).*$", "\\1", "6'2\"")
gsub("^([:digit:]+).*$", "\\1", "6'2\"")
gsub("([:digit:]+).*$", "\\1", "6'2\"")
gsub("\([:digit:]+\).*$", "\\1", "6'2\"")
gsub("([:digit:]+).*$", "\\1", "6'2\"")
gsub("([:digit:]*).*$", "\\1", "6'2\"")
gsub("\([:digit:]+\)'.*$", "\\1", "6'2\"")
gsub("([:digit:]+)'.*$", "\\1", "6'2\"")
x = "6'2\""
x
gsub("^.*(\d+)'.*$", "\\1", x)
gsub("^.*(\\d+)'.*$", "\\1", x)
gsub("^.*(\\d*)'.*$", "\\1", x)
gsub("^.?*(\\d*)'.*$", "\\1", x)
gsub("^.*?(\\d*)'.*$", "\\1", x)
as.numeric(gsub("^.*?(\\d*)'.*$", "\\1", x))
as.numeric(gsub("^.*(\\d*)'.*$", "\\1", x))
as.numeric(gsub("^.*(\\d*)'.*$", "\\1", x))*10
as.numeric(gsub("^.*(\\d*)'.*$", "\\1", x))*12
as.numeric(gsub("^.*(\\d*)'.*$", "\\1", x, na.rm = 0))*12
as.numeric(gsub("^.*(\\d*)'.*$", "\\1", x), na.rm = 0)*12
as.numeric(gsub("^.*(\\d*)'.*$", "\\1", x), na.rm = TRUE)*12
as.numeric(gsub("^.*(\\d*)'.*$", "\\1", x), na.rm = TRUE)
as.numeric(gsub("^.*(\\d*)'.*$", "\\1", x))
max(as.numeric(gsub("^.*(\\d*)'.*$", "\\1", x)),0)
as.numeric(gsub("^.*(\\d*)'.*$", "\\1", x))
as.factor(gsub("^.*(\\d*)'.*$", "\\1", x))
as.numeric(gsub("^.*(\\d*)'.*$", "\\1", x))
x2i = as.numeric(gsub("^.*?(\\d*)'.*$", "\\1", x))
as.numeric(gsub("^.*?(\\d*)'.*$", "\\1", x))
as.numeric(gsub('^.*?(\\d*)".*$', "\\1", x))
if(year == '2018') {
newLeaderboard$entrant.height <- lapply(newLeaderboard$entrant.height, convertHeight)
newLeaderboard$entrant.height <- as.numeric(newLeaderboard$entrant.height)
} else if(year == '2017') {
newLeaderboard$height
}
if(year == '2018') {
newLeaderboard$entrant.height <- lapply(newLeaderboard$entrant.height, convertHeight)
newLeaderboard$entrant.height <- as.numeric(newLeaderboard$entrant.height)
} else if(year == '2017') {
newLeaderboard$height <- <- lapply(newLeaderboard$height, convertHeight)
}
if(year == '2018') {
newLeaderboard$entrant.height <- lapply(newLeaderboard$entrant.height, convertHeight)
newLeaderboard$entrant.height <- as.numeric(newLeaderboard$entrant.height)
} else if(year == '2017') {
newLeaderboard$height <- lapply(newLeaderboard$height, convertHeight)
}
### Convert all heights in cm
message("Convert heights in cm...")
convertHeight <- function(x) {
y = x
# XXX in
if(grepl(" in", x)) {
x2 = gsub("[^[:digit:]]", "",x)
y = cm(as.numeric(x2))
# XXX cm
} else if (grepl(" cm", x)) {
y = as.numeric(gsub("[^[:digit:]]", "",x))
# XX'XX"
} else if(grepl('"', x)||grepl("'", x)) {
x2f = as.numeric(gsub("^.*?(\\d*)'.*$", "\\1", x))
x2i = as.numeric(gsub('^.*?(\\d*)".*$', "\\1", x))
if(is.na(x2f)) { x2f = 0 }
if(is.na(x2i)) { x2i = 0 }
y = cm(x2f * 12 + x2i)
# ""
} else if( x == "") {
y = 0
}
y
}
if(year == '2018') {
newLeaderboard$entrant.height <- lapply(newLeaderboard$entrant.height, convertHeight)
newLeaderboard$entrant.height <- as.numeric(newLeaderboard$entrant.height)
} else if(year == '2017') {
newLeaderboard$height <- lapply(newLeaderboard$height, convertHeight)
}
View(newLeaderboard)
newLeaderboard$height <- as.numeric(newLeaderboard$height)
if(year == '2018') {
newLeaderboard$entrant.weight <- lapply(newLeaderboard$entrant.weight, convertWeight)
newLeaderboard$entrant.weight <- as.numeric(newLeaderboard$entrant.weight)
} else if(year == '2017') {
newLeaderboard$weight <- lapply(newLeaderboard$weight, convertWeight)
newLeaderboard$weight <- as.numeric(newLeaderboard$weight)
}
### Convert all weights in kg
message("Convert weights in kg...")
convertWeight <- function(x) {
y = x
# XXX lb
if(grepl(" lb", x)) {
x2 = gsub("[^[:digit:]]", "",x)
y = as.numeric(x2) * 0.45359237
# XXX kg
} else if (grepl(" kg", x)) {
y = as.numeric(gsub("[^[:digit:]]", "",x))
# ""
} else if( x == "") {
y = 0
}
y
}
if(year == '2018') {
newLeaderboard$entrant.weight <- lapply(newLeaderboard$entrant.weight, convertWeight)
newLeaderboard$entrant.weight <- as.numeric(newLeaderboard$entrant.weight)
} else if(year == '2017') {
newLeaderboard$weight <- lapply(newLeaderboard$weight, convertWeight)
newLeaderboard$weight <- as.numeric(newLeaderboard$weight)
}
### store it in Rda format
message("Store the data in ", outputFile, ".Rda ...")
save(newLeaderboard, file = paste0(outputFile, ".Rda"))
### Convert scores to strings
message("Convert scores to strings...")
newLeaderboard$scores <- as.character(newLeaderboard$scores)
### store it in CSV format
message("Store the data in ", outputFile, ".csv ...")
write.csv(newLeaderboard, file = paste0(outputFile, ".csv"))
